// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: pb/userAccountPb/userAccount.proto

package userAccountPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserAccount_UpdateAccount_FullMethodName = "/UserAccount/UpdateAccount"
	UserAccount_TransOutXa_FullMethodName    = "/UserAccount/TransOutXa"
	UserAccount_TransInXa_FullMethodName     = "/UserAccount/TransInXa"
)

// UserAccountClient is the client API for UserAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAccountClient interface {
	UpdateAccount(ctx context.Context, in *UserAccountTransRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TransOutXa(ctx context.Context, in *UserAccountUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TransInXa(ctx context.Context, in *UserAccountUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAccountClient(cc grpc.ClientConnInterface) UserAccountClient {
	return &userAccountClient{cc}
}

func (c *userAccountClient) UpdateAccount(ctx context.Context, in *UserAccountTransRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserAccount_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountClient) TransOutXa(ctx context.Context, in *UserAccountUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserAccount_TransOutXa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountClient) TransInXa(ctx context.Context, in *UserAccountUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserAccount_TransInXa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAccountServer is the server API for UserAccount service.
// All implementations must embed UnimplementedUserAccountServer
// for forward compatibility
type UserAccountServer interface {
	UpdateAccount(context.Context, *UserAccountTransRequest) (*emptypb.Empty, error)
	TransOutXa(context.Context, *UserAccountUpdateRequest) (*emptypb.Empty, error)
	TransInXa(context.Context, *UserAccountUpdateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserAccountServer()
}

// UnimplementedUserAccountServer must be embedded to have forward compatible implementations.
type UnimplementedUserAccountServer struct {
}

func (UnimplementedUserAccountServer) UpdateAccount(context.Context, *UserAccountTransRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedUserAccountServer) TransOutXa(context.Context, *UserAccountUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransOutXa not implemented")
}
func (UnimplementedUserAccountServer) TransInXa(context.Context, *UserAccountUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransInXa not implemented")
}
func (UnimplementedUserAccountServer) mustEmbedUnimplementedUserAccountServer() {}

// UnsafeUserAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAccountServer will
// result in compilation errors.
type UnsafeUserAccountServer interface {
	mustEmbedUnimplementedUserAccountServer()
}

func RegisterUserAccountServer(s grpc.ServiceRegistrar, srv UserAccountServer) {
	s.RegisterService(&UserAccount_ServiceDesc, srv)
}

func _UserAccount_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountTransRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccount_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServer).UpdateAccount(ctx, req.(*UserAccountTransRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccount_TransOutXa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServer).TransOutXa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccount_TransOutXa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServer).TransOutXa(ctx, req.(*UserAccountUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccount_TransInXa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServer).TransInXa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccount_TransInXa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServer).TransInXa(ctx, req.(*UserAccountUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAccount_ServiceDesc is the grpc.ServiceDesc for UserAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserAccount",
	HandlerType: (*UserAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAccount",
			Handler:    _UserAccount_UpdateAccount_Handler,
		},
		{
			MethodName: "TransOutXa",
			Handler:    _UserAccount_TransOutXa_Handler,
		},
		{
			MethodName: "TransInXa",
			Handler:    _UserAccount_TransInXa_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/userAccountPb/userAccount.proto",
}
