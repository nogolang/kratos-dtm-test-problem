// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             (unknown)
// source: pb/userAccountPb/userAccount.proto

package userAccountPb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserAccountTransInXa = "/UserAccount/TransInXa"
const OperationUserAccountTransOutXa = "/UserAccount/TransOutXa"
const OperationUserAccountUpdateAccount = "/UserAccount/UpdateAccount"

type UserAccountHTTPServer interface {
	TransInXa(context.Context, *UserAccountUpdateRequest) (*emptypb.Empty, error)
	TransOutXa(context.Context, *UserAccountUpdateRequest) (*emptypb.Empty, error)
	UpdateAccount(context.Context, *UserAccountTransRequest) (*emptypb.Empty, error)
}

func RegisterUserAccountHTTPServer(s *http.Server, srv UserAccountHTTPServer) {
	r := s.Route("/")
	r.PUT("/userAccount/updateAccount", _UserAccount_UpdateAccount0_HTTP_Handler(srv))
	r.POST("/userAccount/transOutXa", _UserAccount_TransOutXa0_HTTP_Handler(srv))
	r.POST("/userAccount/TransInXa", _UserAccount_TransInXa0_HTTP_Handler(srv))
}

func _UserAccount_UpdateAccount0_HTTP_Handler(srv UserAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserAccountTransRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAccountUpdateAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccount(ctx, req.(*UserAccountTransRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserAccount_TransOutXa0_HTTP_Handler(srv UserAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserAccountUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAccountTransOutXa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TransOutXa(ctx, req.(*UserAccountUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _UserAccount_TransInXa0_HTTP_Handler(srv UserAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserAccountUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAccountTransInXa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TransInXa(ctx, req.(*UserAccountUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type UserAccountHTTPClient interface {
	TransInXa(ctx context.Context, req *UserAccountUpdateRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	TransOutXa(ctx context.Context, req *UserAccountUpdateRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateAccount(ctx context.Context, req *UserAccountTransRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type UserAccountHTTPClientImpl struct {
	cc *http.Client
}

func NewUserAccountHTTPClient(client *http.Client) UserAccountHTTPClient {
	return &UserAccountHTTPClientImpl{client}
}

func (c *UserAccountHTTPClientImpl) TransInXa(ctx context.Context, in *UserAccountUpdateRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/userAccount/TransInXa"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAccountTransInXa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserAccountHTTPClientImpl) TransOutXa(ctx context.Context, in *UserAccountUpdateRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/userAccount/transOutXa"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAccountTransOutXa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserAccountHTTPClientImpl) UpdateAccount(ctx context.Context, in *UserAccountTransRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/userAccount/updateAccount"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAccountUpdateAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
